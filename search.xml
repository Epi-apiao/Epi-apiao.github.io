<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Birkenwald Crypto</title>
      <link href="/posts/d1ecf36.html"/>
      <url>/posts/d1ecf36.html</url>
      
        <content type="html"><![CDATA[<h2 id="randomCrypto"><a href="#randomCrypto" class="headerlink" title="randomCrypto"></a>randomCrypto</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>下载附件，得到一个python文件：</p><p><img src="https://i.loli.net/2021/10/30/8XNAcR4Va9Jij3q.png" alt="image-20211030183533614"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>代码分析</p><ul><li><code>b</code>逐个获取了flag的ascii码:    <code>b = [ ord(i) for i in flag ]</code></li><li><code>a</code>在65和b的最大值中随机选择一个整数:    <code>a = randint(65, max(b))</code></li><li>flag逐个字符与<code>a</code>进行位运算，得到的结果取ascii码:    <code>ord(flag[i])^a)</code></li><li>进行左移操作，得到的结果转为二进制，切片将二进制标志<code>0b</code>删除，将结果转为字符串，存入密文:    <code>str(bin((ord(flag[i])^a)&lt;&lt;2)[2:])</code></li></ul></li><li><p>检查明文密文对，可以发现可以利用的地方：</p><p>给出的密文也对<code>flag&#123;&#125;</code>进行了加密，所以我们可以借助已知的明文密文对，得到随机产生的<code>a</code>值。</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">“”“根据已知明密文对爆破找出a的值”“”stri <span class="token operator">=</span> <span class="token string">"11011000 11110000 11000100 11011100"</span>k <span class="token operator">=</span> <span class="token string">""</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> stri<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        k <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        k <span class="token operator">+=</span> <span class="token string">" "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> k<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果：<code>a =80</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''根据a的值直接得到明文'''</span>stri <span class="token operator">=</span> <span class="token string">"11011000 11110000 11000100 11011100 10101100 11001000 110011000 11001100 110001100 110011100 110001000 11010100 110011100 110100100 11000100 110100100 11001000 110010100 110011100 110011000 110001000 110001000 110001100 11001100 110000100 11010100 110010000 110000100 11010000 110010100 11000100 110100100 110010000 110010000 110000000 11001000 110000000 10110100"</span>k <span class="token operator">=</span> <span class="token string">""</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> stri<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        k <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        k <span class="token operator">+=</span> <span class="token string">" "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> k<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此即可得到flag。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>各数据类型间的转换：</p><p><a href="https://blog.csdn.net/guyefeng123321/article/details/79056178?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.no_search_link&spm=1001.2101.3001.4242.2">python常用的字符串及进制转换</a></p><ul><li> 二进制字符串转int型：<code>int(str, 2)</code>    需要注意的是：<strong>str不能带进制标志“0b”</strong></li><li>16进制字符串转int型：<code>int(str, 16)</code>    同上，<strong>str不能带进制标志“0x”</strong></li><li>8进制字符串转int型：<code>int(str, 8)</code>    同上，<strong>str不能带进制标志“0o”</strong></li><li>int型转二进制：<code>bin(int_num)</code>    即<strong>不能直接将二进制字符串转成二进制数，需借助int型作为桥梁</strong></li><li>int型转16进制：<code>bin(int_num)</code>    即<strong>不能直接将16进制字符串转成16进制数，需借助int型作为桥梁</strong></li></ul></li><li><p>位运算：</p><p><a href="cnblogs.com/Neeo/articles/10536202.html">大佬的博客</a></p><ul><li>左移<code>&lt;&lt;</code> 操作数为int型，右移得到原值</li><li>右移<code>&gt;&gt;</code> 操作数为int型，左移得到原值</li><li>异或<code>^</code>  操作数为int型，两次异或得到原值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Birkenwald </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame 2021 WP</title>
      <link href="/posts/683681fe.html"/>
      <url>/posts/683681fe.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Hackergame2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件夹遍历</title>
      <link href="/posts/93f25c09.html"/>
      <url>/posts/93f25c09.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>古典密码学相关</title>
      <link href="/posts/aa538cd0.html"/>
      <url>/posts/aa538cd0.html</url>
      
        <content type="html"><![CDATA[<p>主要是一些对<strong>古典密码</strong>以及在刷题过程中接触的比较新颖的<strong>密码题型</strong>及<strong>在线解题网站</strong>以及<strong>解题思路</strong>的总结。</p><h1 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h1><h2 id="Substitution-ciphers"><a href="#Substitution-ciphers" class="headerlink" title="Substitution ciphers"></a>Substitution ciphers</h2><blockquote><p>In a substitution cipher, letters (or groups of letters) are systematically replaced throughout the message for other letters (or groups of letters).</p><p><code>—— &#39;classical cipher&#39; wiki</code></p></blockquote><p>顾名思义，代换密码是指按照一定规则使用一个（或一些）字符代替原来的字符。</p><p>代换密码在CTF竞赛中相对来说更加常见。</p><h3 id="Monoalphabetic-Cipher"><a href="#Monoalphabetic-Cipher" class="headerlink" title="Monoalphabetic Cipher"></a>Monoalphabetic Cipher</h3><h4 id="1-Caesar-cipher"><a href="#1-Caesar-cipher" class="headerlink" title="-1  Caesar cipher"></a>-1  Caesar cipher</h4><h5 id="密码原理"><a href="#密码原理" class="headerlink" title="密码原理"></a>密码原理</h5><h5 id="思路及实现"><a href="#思路及实现" class="headerlink" title="思路及实现"></a>思路及实现</h5><h4 id="2"><a href="#2" class="headerlink" title="-2"></a>-2</h4><h4 id="3-ADFGX-amp-ADFGVX-cipher"><a href="#3-ADFGX-amp-ADFGVX-cipher" class="headerlink" title="-3  ADFGX &amp; ADFGVX cipher"></a>-3  ADFGX &amp; ADFGVX cipher</h4><h4 id="4"><a href="#4" class="headerlink" title="-4"></a>-4</h4><h4 id="5-Affine-cipher"><a href="#5-Affine-cipher" class="headerlink" title="-5  Affine cipher"></a>-5  Affine cipher</h4><h3 id="Polyalphabetic-ciphers"><a href="#Polyalphabetic-ciphers" class="headerlink" title="Polyalphabetic ciphers"></a>Polyalphabetic ciphers</h3><h4 id="1-Vigenere-cipher"><a href="#1-Vigenere-cipher" class="headerlink" title="-1  Vigenère cipher"></a>-1  Vigenère cipher</h4><h4 id="2-Alberti-cipher"><a href="#2-Alberti-cipher" class="headerlink" title="-2  Alberti cipher"></a>-2  Alberti cipher</h4><h2 id="Transposition-ciphers"><a href="#Transposition-ciphers" class="headerlink" title="Transposition ciphers"></a>Transposition ciphers</h2><p>换位密码是在不改变明文字符的基础上，对明文的顺序按一定规则进行改变。</p><h1 id="新颖密码题型"><a href="#新颖密码题型" class="headerlink" title="新颖密码题型"></a>新颖密码题型</h1>]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythonChallenge做题记录</title>
      <link href="/posts/784dd132.html"/>
      <url>/posts/784dd132.html</url>
      
        <content type="html"><![CDATA[<p>最近找了一些关于python的刷题网站，其中<a href="http://www.pythonchallenge.com/">pythonChallenge</a>相当有趣，多种形式结合在一起十分考验python能力。</p><h3 id="Challenge-0"><a href="#Challenge-0" class="headerlink" title="Challenge 0"></a>Challenge 0</h3><h4 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h4><p>​    <img src="https://i.loli.net/2021/10/21/sGmjKvWxkrTqfBC.png" alt="image-20211021124830880"></p><p>将2的38次方计算出来之后，代到网页链接即可。</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>python的次方运算：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">38</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h3><h4 id="题目内容-1"><a href="#题目内容-1" class="headerlink" title="题目内容"></a>题目内容</h4><p><img src="https://i.loli.net/2021/10/21/MVpTiJ2uzesx7EK.png" alt="image-20211021125233239"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>根据图片显示的内容，可以知道这是一个简单的替换加密，与凯撒加密类似。</p><p>在做题过程中应当考虑到python的字符集不是ASCII，而是Unicode，所幸英文字符的Unicode编码与其ASCII编码相同。</p><p>同时注意替换过程中的取模运算。</p><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><p>①如果不用python函数，自己编码的话：</p><ul><li>将字符转为Unicode编码：<code>ord()</code>函数；</li><li>将Unicode编码转为字符：<code>chr()</code>函数；</li><li>连接字符：<code>‘’.join(iterable)</code></li></ul><p>②python3方法<code>str.maketrans()</code>的应用：</p><ul><li>Python3 <code>maketrans()</code> 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。<br>注：两个字符串的长度必须相同，为一一对应的关系。</li><li>Python3 <code>tanslate()</code>方法按照给定转换表对字符串进行转换，第一个参数是字符串，第二个参数是转换表。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>table <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>FIRSTSTRING<span class="token punctuation">,</span> SECONDSTRING<span class="token punctuation">)</span><span class="token builtin">str</span><span class="token punctuation">.</span>tanslate<span class="token punctuation">(</span>s<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>③附加：</p><p> 关于string的一些方法（?）需要<code>import string</code></p><ul><li><p><code>str.isdigit()</code> 返回值为<code>True</code>或<code>False</code>，用于判断字符串<code>str</code>是否为数字。</p></li><li><p>类似的：</p><ul><li><code>str.isalnum()</code> 用于判断字符串是否只由字母和数字组成</li><li><code>str.isdecimal()</code> 用于判断字符串是否只包含十进制字符</li><li><code>str.isalpha()</code> 用于判断字符串是否只由字母或中文字组成</li><li><code>str.isnumeric()</code> 用于判断字符串是否只由数字字符组成</li><li><code>str.isspace() </code> 用于判断字符串是否只包含空白</li><li><code>str.istitle()</code> 用于判断字符串是否是标题化的</li><li><code>str.islower()</code> 用于判断字符串中是否包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写</li><li><code>str.isupper()</code> 用于判断字符串中是否包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写</li></ul></li><li><p><code>string.ascii_lowercase</code> 小写字母串<code>&#39;abcdefghijklmnopqrstuvwxyz&#39;</code></p></li><li><p>类似的：</p><ul><li><code>string.ascii_letters</code> 字母串，由 <code>ascii_lowercase</code> and <code>ascii_uppercase</code>组成</li><li><code>string.ascii_lowercase</code> 大写字母串<code>&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</code></li><li><code>string.digits</code> 数字串<code>&#39;0123456789&#39;</code></li><li><code>string.hexdigits</code> 十六进制字符串<code>&#39;0123456789abcdefABCDEF&#39;</code></li><li><code>string.octdigits</code> 八进制字符串<code>&#39;01234567&#39;</code></li><li><code>string.punctuation</code> 标点字符串<code>!&quot;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~</code></li><li><code>string.printable</code> 包含所有标点、数字、字母和空格的可打印字符字符串</li><li><code>string.whitespace</code> 空白字符串，返回字符空格，制表符，换行符，返回符，换页符和垂直制表符。</li></ul></li></ul><h3 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h3><h4 id="题目内容-2"><a href="#题目内容-2" class="headerlink" title="题目内容"></a>题目内容</h4><p><img src="https://i.loli.net/2021/10/21/OTjZRuSPklVt5KB.png" alt="image-20211021155711001"></p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>根据题目给出的提示，要求我们查看网页源代码并识别字符串。</p><p>在源代码中，我们找到一段注释内容：</p><p><img src="https://i.loli.net/2021/10/21/g5O2QXdh7srkjvF.png" alt="image-20211021155906630"></p><p>将字符内容保存到一个txt文本中，逐一判断字符是否是字母即可。</p><h4 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h4><p>由于之前并没有接触过爬虫相关的知识，这道题的题解也算是为我打开了 新世界的大门，让我意识到python在操作网页方面的极致优势。</p><p>python内置网页相关的包，这道题便利用这一点，结合模式匹配，可以直接找到隐藏在网页源代码中的隐含内容。</p><p>具体流程如下：</p><ul><li>查看并打印源代码，在注释部分发现目标；</li><li>于是利用网页注释<code>&lt;!-- --&gt;</code> 的格式，进行格式匹配，将两部分注释内容取出存入列表；</li><li>对列表的第二个元素进行目标字符的格式匹配。</li></ul><h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><ul><li><p>文件读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> <span class="token string">"operator"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>网页源码获取(需要 <code>import urllib.request</code> 或者 <code>form urllib.request import urlopen</code> )</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopencontent <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">'website'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token comment">#or</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestcontent <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'website'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>target <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment">#or</span><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>target <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启网页</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> webbrowserwb<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'website'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>格式化(以输出为例)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'1231544574897'</span><span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.9s"</span> <span class="token operator">%</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.5f"</span> <span class="token operator">%</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.2d"</span> <span class="token operator">%</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output:12315445748971231544570.5000001'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h3><h4 id="题目内容-3"><a href="#题目内容-3" class="headerlink" title="题目内容"></a>题目内容</h4><p><img src="https://i.loli.net/2021/10/27/gv2M1CFaehYNJwZ.png" alt="image-20211027172759780"></p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>这道题真的就十分考验看图能力，真正考察的内容并不难，但由于没能理解图片内容，思路不清楚，卡死了很多次，甚至于脑洞已经歪到了去找一个被大写字母从四面八方包围的小写字母:(</p><p>无奈之下甚至想到了暴力，但26个字母遍历一遍，也没能解出正确答案，最后还是借助找到的wp（<a href="https://www.hackingnote.com/en/python-challenge-solutions/level-3">大佬的blog😊</a>）作为参考了解了图片内容，捋清思路，并顺利解出答案。</p><p>根据图片所示，一个小蜡烛（小写字母）两侧各有三根大蜡烛（大写字母），<strong>这一整体的两侧应当是小写字母</strong>，从而才能将这个整体独立出来。</p><p>因此按照给出的限制，可以写出满足要求的正则表达式。</p><h4 id="dalao题解"><a href="#dalao题解" class="headerlink" title="dalao题解"></a>dalao题解</h4><blockquote><ul><li><p><strong>Step 1: Load Data</strong></p><p>Similar to level 2, You can manually copy-and-paste the text to a file(<code>resources/level3.txt</code> in source code), then read from it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'resources/level3.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or extract the text from HTML directly.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re<span class="token operator">>></span><span class="token operator">></span> html <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://www.pythonchallenge.com/pc/def/equality.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;!--(.*?)-->"</span><span class="token punctuation">,</span> html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Step 2: Find the Matches</strong></p><p>Now we have the content as a big long string, we can use regular expression to find all the matches. The pattern can be described as <code>[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+</code>. Here’s a break down of the pattern:</p><ul><li><code>[a-z]</code>: 1 lower case letter</li><li><code>[A-Z]</code>: 1 upper case letter</li><li><code>[A-Z]&#123;3&#125;</code>: 3 consecutive upper case letters</li><li><code>[A-Z]&#123;3&#125;[a-z][A-Z]&#123;3&#125;</code>: 3 upper case letters + 1 lower case letter + 3 upper case letters</li><li><code>[^A-Z]</code>: any character BUT an upper case letter</li><li><code>[^A-Z]+</code>: at least one such character</li><li><code>[^A-Z]+[A-Z]&#123;3&#125;[a-z][A-Z]&#123;3&#125;[^A-Z]+</code>: something else before and after our patter(<code>AAAbCCC</code>) so there’s no more than 3 consecutive upper case letters on each side</li><li><code>[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+</code>: …and we only care about the lower case</li></ul><p>Let’s see what we get:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>And join them together</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]+"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'linkedlist'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>That’s it! <strong>linkedlist</strong>.</p></li></ul></blockquote><h4 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h4><p>果然，正则表达式是一个过不去的坎。现在当事人就十分后悔学JAVA的时候没有认真听讲，反而轻轻放过了。</p><ul><li><p>正则表达式 -from <a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式规则</a></p><ul><li>表达式全集</li></ul><table><thead><tr><th align="center">字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td align="center">^</td><td align="center">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td align="center">$</td><td align="center">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td align="center">*</td><td align="center">匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td></tr><tr><td align="center">+</td><td align="center">匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td></tr><tr><td align="center">?</td><td align="center">匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td></tr><tr><td align="center">{<em>n</em>}</td><td align="center"><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td></tr><tr><td align="center">{<em>n</em>,}</td><td align="center"><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td></tr><tr><td align="center">{<em>n</em>,<em>m</em>}</td><td align="center"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="center">?</td><td align="center">当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td align="center">.</td><td align="center">匹配除“<code>\</code>*<code>n</code><em>”之外的任何单个字符。要匹配包括“<code>\</code></em><code>n</code>*”在内的任何字符，请使用像“`(.</td></tr><tr><td align="center">(pattern)</td><td align="center">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td></tr><tr><td align="center">(?:pattern)</td><td align="center">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td></tr><tr><td align="center">(?=pattern)</td><td align="center">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td></tr><tr><td align="center">(?!pattern)</td><td align="center">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td></tr><tr><td align="center">(?&lt;=pattern)</td><td align="center">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td></tr><tr><td align="center">(?&lt;!pattern)</td><td align="center">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td></tr><tr><td align="center">x|y</td><td align="center">匹配x或y。例如，“`z</td></tr><tr><td align="center">[xyz]</td><td align="center">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td align="center">[^xyz]</td><td align="center">负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td align="center">[a-z]</td><td align="center">字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td align="center">[^a-z]</td><td align="center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td align="center">\b</td><td align="center">匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td align="center">\B</td><td align="center">匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td align="center">\cx</td><td align="center">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td align="center">\d</td><td align="center">匹配一个数字字符。等价于[0-9]。</td></tr><tr><td align="center">\D</td><td align="center">匹配一个非数字字符。等价于[^0-9]。</td></tr><tr><td align="center">\f</td><td align="center">匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td align="center">\n</td><td align="center">匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td align="center">\r</td><td align="center">匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td align="center">\s</td><td align="center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td align="center">\S</td><td align="center">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td></tr><tr><td align="center">\t</td><td align="center">匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td align="center">\v</td><td align="center">匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td align="center">\w</td><td align="center">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td align="center">\W</td><td align="center">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td align="center">\x<em>n</em></td><td align="center">匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td align="center">*num*</td><td align="center">匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td align="center">*n*</td><td align="center">标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td></tr><tr><td align="center">*nm*</td><td align="center">标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果*nm</em>之前至少有<em>n</em>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。如果前面的条件都不满足，若<em>n</em>和<em>m</em>均为八进制数字（0-7），则*nm<em>将匹配八进制转义值</em>nm*。</td></tr><tr><td align="center">*nml*</td><td align="center">如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td></tr><tr><td align="center">\u<em>n</em></td><td align="center">匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr></tbody></table><ul><li>常用正则表达式</li></ul><table><thead><tr><th align="center">用户名</th><th>/^[a-z0-9_-]{3,16}$/</th></tr></thead><tbody><tr><td align="center">密码</td><td>/^[a-z0-9_-]{6,18}$/</td></tr><tr><td align="center">十六进制值</td><td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td></tr><tr><td align="center">电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td></tr><tr><td align="center">URL</td><td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]*)*/?$/</td></tr><tr><td align="center">IP 地址</td><td>/((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</td></tr><tr><td align="center">HTML 标签</td><td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt;|\s+/&gt;)$/</td></tr><tr><td align="center">删除代码\注释</td><td>(?&lt;!http:|\S)//.*$</td></tr><tr><td align="center">Unicode编码中的汉字范围</td><td>/^[\u2E80-\u9FFF]+$/</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021暑假考核</title>
      <link href="/posts/5746fed2.html"/>
      <url>/posts/5746fed2.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021暑假考核"><a href="#2021暑假考核" class="headerlink" title="2021暑假考核"></a>2021暑假考核</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="BaseChallenge"><a href="#BaseChallenge" class="headerlink" title="BaseChallenge"></a>BaseChallenge</h3><h4 id="题目-思路"><a href="#题目-思路" class="headerlink" title="题目+思路"></a>题目+思路</h4><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105149.png" alt="image-20210717105149898"></p><p>简单直接<strong>一次性解密</strong>网站</p><p><a href="https://tool.ip138.com/base64/">base64解码 base64编码 在线base64解码/编码工具 (ip138.com)</a></p><p>base家族在线解密工具<br><a href="http://www.atoolbox.net/Tool.php?Id=934">http://www.atoolbox.net/Tool.php?Id=934</a></p><p><a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a></p><p>解密之后得到十六进制字符串如下</p><p>666c61677b7930755f6b316c6c5f6261736536345f656e636f64657d</p><p><strong>十六进制转字符串</strong>可得（网站：<a href="https://www.bejson.com/convert/ox2str/">16进制到文本字符串的转换，16进制-BeJSON.com</a>）</p><p>flag{y0u_k1ll_base64_encode}</p><h3 id="简简单单套个娃"><a href="#简简单单套个娃" class="headerlink" title="简简单单套个娃"></a>简简单单套个娃</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105414.png" alt="image-20210717105414806"></p><p>下载附件后用记事本打开</p><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105509.png" alt="image-20210717105509452"></p><p>发现文件头是PK，经过Google之后</p><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105540.png" alt="image-20210717105540645"></p><p>直接添加文件后缀</p><h3 id="没有什么是不能隐写的！"><a href="#没有什么是不能隐写的！" class="headerlink" title="没有什么是不能隐写的！"></a>没有什么是不能隐写的！</h3><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RealSignIn"><a href="#RealSignIn" class="headerlink" title="RealSignIn"></a>RealSignIn</h3><h3 id="FakeSignIn"><a href="#FakeSignIn" class="headerlink" title="FakeSignIn"></a>FakeSignIn</h3><h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><h3 id="WriteByYinLuXing"><a href="#WriteByYinLuXing" class="headerlink" title="WriteByYinLuXing"></a>WriteByYinLuXing</h3>]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 实验室考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Tutorials </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorials </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
