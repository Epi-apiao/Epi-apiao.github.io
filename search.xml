<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pythonChallenge做题记录</title>
      <link href="/posts/784dd132.html"/>
      <url>/posts/784dd132.html</url>
      
        <content type="html"><![CDATA[<p>最近找了一些关于python的刷题网站，其中</p><p>相当有趣，多种形式结合在一起十分考验python能力。</p><h3 id="Challenge-0"><a href="#Challenge-0" class="headerlink" title="Challenge 0"></a>Challenge 0</h3><h4 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h4><p>​    <img src="https://i.loli.net/2021/10/21/sGmjKvWxkrTqfBC.png" alt="image-20211021124830880"></p><p>将2的38次方计算出来之后，代到网页链接即可。</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><p>python的次方运算：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">38</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h3><h4 id="题目内容-1"><a href="#题目内容-1" class="headerlink" title="题目内容"></a>题目内容</h4><p><img src="https://i.loli.net/2021/10/21/MVpTiJ2uzesx7EK.png" alt="image-20211021125233239"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>根据图片显示的内容，可以知道这是一个简单的替换加密，与凯撒加密类似。</p><p>在做题过程中应当考虑到python的字符集不是ASCII，而是Unicode，所幸英文字符的Unicode编码与其ASCII编码相同。</p><p>同时注意替换过程中的取模运算。</p><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><p>①如果不用python函数，自己编码的话：</p><ul><li>将字符转为Unicode编码：<code>ord()</code>函数；</li><li>将Unicode编码转为字符：<code>chr()</code>函数；</li><li>连接字符：<code>‘’.join(iterable)</code></li></ul><p>②python3方法<code>str.maketrans()</code>的应用：</p><ul><li>Python3 <code>maketrans()</code> 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。<br>注：两个字符串的长度必须相同，为一一对应的关系。</li><li>Python3 <code>tanslate()</code>方法按照给定转换表对字符串进行转换，第一个参数是字符串，第二个参数是转换表。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>table <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>FIRSTSTRING<span class="token punctuation">,</span> SECONDSTRING<span class="token punctuation">)</span><span class="token builtin">str</span><span class="token punctuation">.</span>tanslate<span class="token punctuation">(</span>s<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>③附加：</p><p> 关于string的一些方法（?）</p><ul><li><p><code>str.isdigit()</code> 返回值为<code>True</code>或<code>False</code>，用于判断字符串<code>str</code>是否为数字。</p></li><li><p>类似的：</p><ul><li><code>str.isalnum()</code> 用于判断字符串是否只由字母和数字组成</li><li><code>str.isdecimal()</code> 用于判断字符串是否只包含十进制字符</li><li><code>str.isalpha()</code> 用于判断字符串是否只由字母或中文字组成</li><li><code>str.isnumeric()</code> 用于判断字符串是否只由数字字符组成</li><li><code>str.isspace() </code> 用于判断字符串是否只包含空白</li><li><code>str.istitle()</code> 用于判断字符串是否是标题化的</li><li><code>str.islower()</code> 用于判断字符串中是否包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写</li><li><code>str.isupper()</code> 用于判断字符串中是否包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写</li></ul></li><li><p><code>string.ascii_lowercase</code> 小写字母串<code>&#39;abcdefghijklmnopqrstuvwxyz&#39;</code></p></li><li><p>类似的：</p><ul><li><code>string.ascii_letters</code> 字母串，由 <code>ascii_lowercase</code> and <code>ascii_uppercase</code>组成</li><li><code>string.ascii_lowercase</code> 大写字母串<code>&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</code></li><li><code>string.digits</code> 数字串<code>&#39;0123456789&#39;</code></li><li><code>string.hexdigits</code> 十六进制字符串<code>&#39;0123456789abcdefABCDEF&#39;</code></li><li><code>string.octdigits</code> 八进制字符串<code>&#39;01234567&#39;</code></li><li><code>string.punctuation</code> 标点字符串<code>!&quot;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~</code></li><li><code>string.printable</code> 包含所有标点、数字、字母和空格的可打印字符字符串</li><li><code>string.whitespace</code> 空白字符串，返回字符空格，制表符，换行符，返回符，换页符和垂直制表符。</li></ul></li></ul><h3 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h3><h4 id="题目内容-2"><a href="#题目内容-2" class="headerlink" title="题目内容"></a>题目内容</h4><p><img src="https://i.loli.net/2021/10/21/OTjZRuSPklVt5KB.png" alt="image-20211021155711001"></p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>根据题目给出的提示，要求我们查看网页源代码并识别字符串。</p><p>在源代码中，我们找到一段注释内容：</p><p><img src="https://i.loli.net/2021/10/21/g5O2QXdh7srkjvF.png" alt="image-20211021155906630"></p><p>将字符内容保存到一个txt文本中，逐一判断字符是否是字母即可。</p><h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><ul><li><p>文件读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> <span class="token string">"operator"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021暑假考核</title>
      <link href="/posts/5746fed2.html"/>
      <url>/posts/5746fed2.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021暑假考核"><a href="#2021暑假考核" class="headerlink" title="2021暑假考核"></a>2021暑假考核</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="BaseChallenge"><a href="#BaseChallenge" class="headerlink" title="BaseChallenge"></a>BaseChallenge</h3><h4 id="题目-思路"><a href="#题目-思路" class="headerlink" title="题目+思路"></a>题目+思路</h4><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105149.png" alt="image-20210717105149898"></p><p>简单直接<strong>一次性解密</strong>网站</p><p><a href="https://tool.ip138.com/base64/">base64解码 base64编码 在线base64解码/编码工具 (ip138.com)</a></p><p>base家族在线解密工具<br><a href="http://www.atoolbox.net/Tool.php?Id=934">http://www.atoolbox.net/Tool.php?Id=934</a></p><p><a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a></p><p>解密之后得到十六进制字符串如下</p><p>666c61677b7930755f6b316c6c5f6261736536345f656e636f64657d</p><p><strong>十六进制转字符串</strong>可得（网站：<a href="https://www.bejson.com/convert/ox2str/">16进制到文本字符串的转换，16进制-BeJSON.com</a>）</p><p>flag{y0u_k1ll_base64_encode}</p><h3 id="简简单单套个娃"><a href="#简简单单套个娃" class="headerlink" title="简简单单套个娃"></a>简简单单套个娃</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105414.png" alt="image-20210717105414806"></p><p>下载附件后用记事本打开</p><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105509.png" alt="image-20210717105509452"></p><p>发现文件头是PK，经过Google之后</p><p><img src="https://raw.githubusercontent.com/Epi-apiao/webImages/main/img/20210717105540.png" alt="image-20210717105540645"></p><p>直接添加文件后缀</p><h3 id="没有什么是不能隐写的！"><a href="#没有什么是不能隐写的！" class="headerlink" title="没有什么是不能隐写的！"></a>没有什么是不能隐写的！</h3><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RealSignIn"><a href="#RealSignIn" class="headerlink" title="RealSignIn"></a>RealSignIn</h3><h3 id="FakeSignIn"><a href="#FakeSignIn" class="headerlink" title="FakeSignIn"></a>FakeSignIn</h3><h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><h3 id="WriteByYinLuXing"><a href="#WriteByYinLuXing" class="headerlink" title="WriteByYinLuXing"></a>WriteByYinLuXing</h3>]]></content>
      
      
      <categories>
          
          <category> studyDiary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 实验室考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Tutorials </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorials </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
